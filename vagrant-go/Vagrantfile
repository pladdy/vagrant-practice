# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # avoid 'Innapropriate ioctl for device' messages
  # see vagrant config doc for more info: https://www.vagrantup.com/docs/vagrantfile/ssh_settings.html
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"
  config.vm.box = "ubuntu/xenial64"

  # I tried using provision file to move over some big files and it was painfully slow.
  # do it via the vagrant-scp plugin instead or just sync a dir
  # /vagrant is a dir on the VM that is sync'd with the local directory by default
  #
  ## This is slow for big packages
  # Dir.glob('./provision/*').each do |file|
  #   config.vm.provision "file", source: file, destination: "/tmp"
  # end

  # example using a script
  config.vm.provision "bootstrap", type: "shell" do |s|
    s.inline = "apt-get update"
  end

  # example doing an inline set of commands
  config.vm.provision "adduser", type: "shell" do |s|
    s.inline = <<-SHELL
    # set up user; TODO: puppet :)
    USER_TO_MAKE=pladdy

    if id ${USER_TO_MAKE} > /dev/null 2>&1; then
      echo "User ${USER_TO_MAKE} already exists"
    else
      useradd -m ${USER_TO_MAKE} -s /bin/bash

      # if user is new, add go to path
      if [ $? == 0 ]; then
        echo "Updating PATH in .bashrc"
        echo PATH=$PATH:/usr/local/go/bin >> /home/${USER_TO_MAKE}/.bashrc
      fi

      echo ${USER_TO_MAKE}:${USER_TO_MAKE} | chpasswd
    fi
    SHELL
  end

  config.vm.provision "install-go", type: "shell", path: "./scripts/install-go"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = true
end
